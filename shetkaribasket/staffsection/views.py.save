from django.http.response import JsonResponse
from ..orders.models import Cart, Order
from ..orders.serializer import CartSerializer, OrderSerializer
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth import get_user_model, logout, login
from ..users.views import generate_token
from twilio.rest import Client


# Create your views here.
@csrf_exempt
def process_undelivered_orders(request, u_id, token):
    try:
        UserModel = get_user_model()
        user = UserModel.objects.get(pk=u_id)
        if user.auth_token != token:
            return JsonResponse({"ERR": "Only users can see their orders"}, status=403)
        if user.is_staff != True:
            return JsonResponse({"ERR": "Only employees can take orders data"}, status=403)
    except:
        return JsonResponse({"ERR": "Invalid user"}, status=404)

    if request.method == 'GET':
        cart = Cart.objects.filter(is_delivered=False)
        serializer = CartSerializer(cart, many=True)
        return JsonResponse(serializer.data, safe=False)

    if request.method == 'POST':
        id = request.POST['cart_id']
        payment_method = request.POST['payment_method']
        is_delivered = request.POST['is_delivered']
        if is_delivered.lower() == "true":
            is_delivered = True
        else:
            is_delivered = False

        try:
            cart = Cart.objects.get(pk=id)
            cart.is_delivered = is_delivered
            cart.order_status = "Delivered"
            cart.payment_method = payment_method
            cart.delivered_by = user
            cart.save()
            try:
                account_sid = "AC16cbcdb22164d60fc03783c6b826fe3d"
                auth_token = "9970bb96868946d212eb56817ef4fdc6"
                client = Client(account_sid, auth_token)

                msg = f"Hello {cart.user_owner.name}, your order of Rs.{cart.subtotal} " \
                      f"is been delivered successfully. Thank you for choosing us. \n" \
                      f"Also give us a feedback at : https://review.shetkaribasket.in/{cart.id}"
                message = client.messages.create(
                    body=msg,
                    from_="+13234760651",
                    to=f"+{cart.user_owner.phone}"
                )
                print(message.status)
            except:
                pass
            return JsonResponse(CartSerializer(cart).data, status=200)
        except:
            return JsonResponse({'ERR': "Cart does not exists"}, status=404)


@csrf_exempt
def signin(request):
    if request.method != 'POST':
        return JsonResponse({"ERR": "Only POST method allowed"})

    username = request.POST['phone']
    password = request.POST['password']

    try:
        username = int(username)
        username = str(username)
    except:
        return JsonResponse({'ERR': 'Phone no. should be number.'}, status=400)

    if len(password) < 4:
        return JsonResponse({"ERR": "Password must be longer than 4 characters"}, status=400)

    usermodel = get_user_model()
    try:
        user = usermodel.objects.get(phone=username)

        if user.is_staff == False:
            return JsonResponse({'ERR': "Only staff users are allowed on this route."}, status=400)

        if user.check_password(password):
            user_dict = usermodel.objects.filter(phone=int(username)).values().first()
            user_dict.pop('password')

            # if user.auth_token != "0":
            #     user.auth_token = "0"
            #     user.save()
            #     return JsonResponse({"ERR": "Previous session exists"})

            token = generate_token()
            user.auth_token = token
            user.save()
            login(request, user)
            return JsonResponse({'token': token, 'user': user_dict})
        else:
            return JsonResponse({
                'ERR': 'Invalid login credentials.'
            })
    except usermodel.DoesNotExist:
        return JsonResponse({"ERR": "Invalid user"})


def get_orders_by_cart_id(request, cart_id, u_id, token):
    if request.method != 'GET':
        return JsonResponse({'ERR': "Only GET requests are allowed"}, status=400)

        # Validate User.
    try:
        UserModel = get_user_model()
        user = UserModel.objects.get(pk=u_id)
        if user.auth_token != token:
            return JsonResponse({"ERR": "Invalid auth token"}, status=403)

        if not user.is_staff:
            return JsonResponse({"ERR": "only staff is allowed"}, status=403)
    except:
        return JsonResponse({"ERR": "Invalid user"}, status=404)

        # Check cart ownership
    try:
        cart = Cart.objects.get(pk=cart_id)
    except:
        return JsonResponse({'ERR': f"Cart with id {cart_id} not found"}, status=404)

        # Get cart orders
    try:
        orders = Order.objects.filter(cart=cart)

        o_list = []
        for order in orders:
            ord = OrderSerializer(order).data
            ord['product_name'] = order.product.name
            ord['name'] = order.user.name
            ord['unit'] = order.product.unit
            ord['product_price'] = order.product.price
            o_list.append(ord)
        return JsonResponse(o_list, status=200, safe=False)
    except:
        return JsonResponse({'ERR': "Internal server error."}, status=500)


